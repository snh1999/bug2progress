// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ################################# USER #############################
model User {
  id                  String             @id @default(uuid())
  joinedAt            DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  email               String             @unique
  role                Role               @default(USER)
  isActive            Boolean            @default(true)
  password            String
  passwordChangedAt   DateTime           @default(now())
  passwordResetToken  String?            @unique
  passwordTokenExpiry DateTime?
  profile             Profile?
  posts               Post[]
  // ownedOrganization   Organization  @relation("admin")
  // Organization        Organization  @relation("moderator")
  // Project             Project[]
  postComment         PostComment[]
  ticketComment       TicketComment[]
  ticketCreator       TicketRoles?       @relation("creator")
  ticketVarifier      TicketRoles?       @relation("varifier")
  ticketCloser        TicketRoles?       @relation("closer")
  ticketAssigner      TicketRoles?       @relation("assign")
  developerTicket     TicketRoles?       @relation("developer")
  projectXFeatures    ProjectXFeatures[]

  orgOwned  Organization[]
  orgJoined OrgMembers[]

  projectOwned   Project[]
  projectManaged ProjectContributor[]
}

enum Role {
  USER
  ADMIN
}

// dependant on exactly one USER- PK userid is same as USER
model Profile {
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @id
  bio      String?
  name     String
  username String    @unique
  country  String?
  birthday DateTime?
  photo    String?
}

// model preferences

model Post {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  title           String
  published       Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  summary         String?
  slug            String?  @unique
  postContent     String
  attachmentFiles String[]
  isPublic        Boolean  @default(true)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  refProject   Project? @relation(fields: [refProjectId], references: [id])
  refProjectId String?

  refFeature    ProjectXFeatures? @relation(fields: [refProjectId, refFeaturesId], references: [projectId, featuresId])
  refFeaturesId String?

  // views
  // rating
  // categories Category[]
  // contributor
  // comment - #comment
  // privacy
  postComment PostComment[]
  project     Project?      @relation("basePost")
  features    Features?
}

// ################################# Organization #############################
model Organization {
  id          String       @id @default(uuid())
  name        String
  description String
  urlid       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  updateLog   String
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  // 	- time - by whom - action  // create a folder and store there?
  post        Post[] // posts owned by organization
  project     Project[]
  members     OrgMembers[]
}

// keeps track of MEMBERS OF ORGANIZATION
model OrgMembers {
  org            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  memberType MemberType @default(MEMBER)

  @@id([organizationId, userId])
}

enum MemberType {
  ADMIN
  MODERATOR
  MEMBER
}

// ################################# Project #############################
model Project {
  id        String   @id @default(uuid())
  urlid     String?  @unique
  title     String
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  status   ProjectStatus @default(IN_DEVELOPMENT)
  isPublic Boolean       @default(true)

  basePost   Post   @relation("basePost", fields: [basePostId], references: [id], onDelete: Cascade)
  basePostId String @unique

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  // status - in dev | released version | depricated
  // 			project page shows the 
  // 						project details
  // 						issues associated
  // 						different roles
  // 						comments
  // 						features
  post             Post[]
  projectXFeatures ProjectXFeatures[]
  ticket           Ticket[]
  Manager          ProjectContributor[]
}

enum ProjectStatus {
  PROPOSED
  IN_DEVELOPMENT
  ACTIVE
  MAINTAINED
  NOT_MAINTAINED
  OBSOLETE
}

model ProjectContributor {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role ProjectRole @default(DEVELOPER)

  @@id([projectId, userId])
}

enum ProjectRole {
  MANAGER
  DEVELOPER
}

// ################################# Features #############################
// author, is public
model Features {
  id               String             @id @default(uuid())
  title            String
  description      String
  necessaryLinks   String[]
  process          String
  isPublic         Boolean            @default(true)
  projectXFeatures ProjectXFeatures[]

  basePost Post   @relation(fields: [postId], references: [id])
  postId   String @unique
}

model ProjectXFeatures {
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  feature     Features    @relation(fields: [featuresId], references: [id])
  featuresId  String
  featureType FeatureType @default(ACTIVE)
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     String
  ticket      Ticket[]
  post        Post[]

  @@id([projectId, featuresId])
}

enum FeatureType {
  MAINTAINED
  ACTIVE
  DEPRICATED
  OBSOLETE
}

// ################################# Comment #############################
model PostComment {
  id String @id @default(uuid())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  updatedAt DateTime @updatedAt
  text      String
  // postedAt DateTime @default(now())

  parentPost   Post   @relation(fields: [parentPostId], references: [id])
  parentPostId String

  predecessorId String?
  predecessor   PostComment?  @relation("commentHistory", fields: [predecessorId], references: [id])
  successor     PostComment[] @relation("commentHistory")
}

model TicketComment {
  id String @id @default(uuid())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  updatedAt DateTime @updatedAt
  text      String

  parentTicket   Ticket @relation(fields: [parentTicketId], references: [id])
  parentTicketId String

  predecessorId String?
  predecessor   TicketComment?  @relation("commentHistory", fields: [predecessorId], references: [id])
  successor     TicketComment[] @relation("commentHistory")
}

// ################################# Ticket #############################

model Ticket {
  id             String         @id @default(uuid())
  title          String
  description    String
  createdAt      DateTime       @default(now())
  closedAt       DateTime?
  updatedAt      DateTime       @updatedAt
  ticketType     TicketType
  ticketSeverity TicketSeverity
  ticketPriority TicketPriority

  project                    Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                  String
  feature                    ProjectXFeatures? @relation(fields: [projectId, projectXFeaturesFeaturesId], references: [projectId, featuresId])
  projectXFeaturesFeaturesId String?

  ticketComment TicketComment[]
  ticketRoles   TicketRoles?
}

enum TicketType {
  BUG
  ISSUE
  ENHANCEMENT
  FEATURE_REQUEST
}

enum TicketSeverity {
  CRITICAL
  MAJOR
  MINOR
  LOW
  OPTIONAL
}

enum TicketPriority {
  HIGH
  MEDIUM
  LOW
}

model TicketRoles {
  id String @id @default(uuid())

  // status - closed_at = closed, varified_by = waiting for varification
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String @unique

  creator   User   @relation("creator", fields: [creatorId], references: [id])
  creatorId String @unique

  varifiedBy User?   @relation("varifier", fields: [varifierId], references: [id]) // (admin| manager| owner) - either varify/ close
  varifierId String? @unique

  closedBy User?   @relation("closer", fields: [closeId], references: [id]) // (admin| manager| owner)
  closeId  String? @unique

  assignedBy User?   @relation("assign", fields: [assignedId], references: [id]) // (admin| manager| owner)
  assignedId String? @unique

  assignedTo  User?   @relation("developer", fields: [developerId], references: [id]) // (admin| manager| owner)
  developerId String? @unique
}
