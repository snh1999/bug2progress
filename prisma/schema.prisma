// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  joinedAt            DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  email               String          @unique
  role                Role            @default(USER)
  isActive            Boolean         @default(true)
  password            String
  passwordChangedAt   DateTime        @default(now())
  passwordResetToken  String?         @unique
  passwordTokenExpiry DateTime?
  profile             Profile?
  posts               Post[]
  postComment         PostComment[]
  ticketComment       TicketComment[]
  ticketCreator       Ticket[]
  ticketVerifier      Ticket[]        @relation("verifier")
  ticketAssigner      Ticket[]        @relation("assign")
  projectXFeatures    Features[]

  orgOwned  Organization[]
  orgJoined OrgMembers[]

  projectOwned   Project[]
  projectManaged ProjectContributor[]
}

enum Role {
  USER
  ADMIN
}

model Profile {
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @id
  bio      String?
  name     String
  username String    @unique
  country  String?
  birthday DateTime?
  photo    String?
}

model Post {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  title           String
  published       Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  summary         String?
  slug            String?  @unique
  postContent     String
  attachmentFiles String[]
  isPublic        Boolean  @default(true)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?

  refProject   Project? @relation("ref-project", fields: [refProjectId], references: [id])
  refProjectId String?

  // refFeature    Features? @relation("ref-feature", fields: [refFeaturesId], references: [id])
  // refFeaturesId String?

  // views
  // rating
  // categories Category[]
  // contributor
  // comment - #comment
  // privacy
  postComment PostComment[]
  project     Project?
  // features    Features?
}

model Organization {
  id          String       @id @default(uuid())
  name        String
  description String
  urlid       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  updateLog   String
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  // 	- time - by whom - action  // create a folder and store there?
  post        Post[] // posts owned by organization
  project     Project[]
  members     OrgMembers[]
}

model OrgMembers {
  org            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  memberType MemberType @default(MEMBER)

  @@id([organizationId, userId])
}

enum MemberType {
  ADMIN
  MODERATOR
  MEMBER
}

model Project {
  id         String   @id @default(uuid())
  urlid      String?  @unique
  inviteCode String   @unique @default(uuid())
  title      String
  summary    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  status   ProjectStatus @default(IN_DEVELOPMENT)
  isPublic Boolean       @default(true)

  basePost   Post   @relation(fields: [basePostId], references: [id], onDelete: Cascade)
  basePostId String @unique

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  // 			project page shows the
  // 						project details
  // 						issues associated
  // 						different roles
  // 						comments
  // 						features
  post             Post[]               @relation("ref-project")
  projectXFeatures Features[]
  ticket           Ticket[]
  members          ProjectContributor[]
}

enum ProjectStatus {
  PROPOSED
  IN_DEVELOPMENT
  ACTIVE
  MAINTAINED
  NOT_MAINTAINED
  OBSOLETE
}

model ProjectContributor {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role ProjectRole @default(DEVELOPER)

  @@id([projectId, userId])
}

enum ProjectRole {
  MANAGER
  LEAD
  DEVELOPER
}

model Features {
  id             String      @id @default(uuid())
  title          String
  description    String
  necessaryLinks String[]
  process        String?
  isPublic       Boolean     @default(true)
  featureType    FeatureType @default(ACTIVE)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  owner   User     @relation(fields: [ownerId], references: [id])
  ownerId String
  ticket  Ticket[]
}

enum FeatureType {
  MAINTAINED
  ACTIVE
  DEPRECATED
  OBSOLETE
  PROPOSED
}

model PostComment {
  id String @id @default(uuid())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String

  parentPost   Post   @relation(fields: [parentPostId], references: [id])
  parentPostId String

  predecessorId String?
  predecessor   PostComment?  @relation("commentHistory", fields: [predecessorId], references: [id])
  successor     PostComment[] @relation("commentHistory")
}

model TicketComment {
  id String @id @default(uuid())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String

  parentTicket   Ticket @relation(fields: [parentTicketId], references: [id])
  parentTicketId String

  predecessorId String?
  predecessor   TicketComment?  @relation("commentHistory", fields: [predecessorId], references: [id])
  successor     TicketComment[] @relation("commentHistory")
}

model Ticket {
  id          String    @id @default(uuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  dueAt       DateTime?
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  position    Int

  ticketType     TicketType?
  ticketPriority TicketPriority?
  ticketStatus   TicketStatus    @default(BACKLOG)

  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  feature   Features? @relation(fields: [featureId], references: [id])
  featureId String?

  verifiedBy User?     @relation("verifier", fields: [verifierId], references: [id])
  verifierId String?
  verifiedAt DateTime?

  assignedContributor   User?   @relation("assign", fields: [assignedContributorId], references: [id])
  assignedContributorId String?

  ticketComment TicketComment[]
}

enum TicketType {
  BUG
  TECH_DEBT
  ENHANCEMENT
  FEATURE
  SPIKE
  STORY
  TASK
  EPIC
  SUPPORT
  TEST
}

enum TicketStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
  IN_QA
  DEPLOYED
  ARCHIVED
  CANCELED
}

enum TicketPriority {
  CRITICAL
  URGENT
  HIGH
  MEDIUM
  LOW
  OPTIONAL
}
